; CPSC-439 Theory of Computation
; Project #2: Lambda Calculus
; Brian Lucero | David Cortez | Ricardo Barojas 
; April 29, 2022

#!r6rs
(import (rnrs lists (6))
        (rnrs base (6))
        (rnrs io simple (6)))

;variable definitions for code readability
(define is-accepted? (lambda (s dfa) (memq s (accept-states dfa))))
(define current-state car)
(define state-transitions cadr)
(define accept-states caddr)


;our implementation of the assoc function
(define (check-list thing alist)
   (if (null? alist)
       #f
       (if (equal? (car (car alist)) thing)
           (car alist)
           (check-list thing (cdr alist)))))

;function to execute the dfa
(define execute
  (lambda (dfa input)
    (letrec ((recurse ;recursion call to loop the state calls
              (lambda (moves d2 i)
                (let ((x (current-state d2)))
                  (if (null? i) (cons x moves)
                      (recurse (cons x moves) (next-state d2 (car i)) (cdr i)))))))
      (let ((moves (recurse '() dfa input)))
        (if (is-accepted? (car moves) dfa)
                           '1 '0))))) ;1 is an accepted input, 0 is a rejected input

;function to move to next state of the dfa given an input
(define next-state
  (lambda (dfa symbol)
    (let ((current (current-state dfa)) (transition (state-transitions dfa)))
      (list
       (if (eq? current 'failed)
           'failed
           (let ((pair (check-list (list current symbol) transition)))
             (if pair (cadr pair) 'failed)))
                  transition 
       (accept-states dfa)))))

;dfa representation of 6.3 from the textbook
(define xor-dfa
  '(q0						                                                ;start state	       
     (((q0 0) q0) ((q0 1) q1) ((q1 0) q1) ((q1 1) q0))            ;transition state
   (q1)))                                                         ;success state

;dfa representation of 6.4 from the textbook
(define figure6-4_dfa
  '(q0                                                            ; start state
     (((q0 0) q2) ((q0 1) q3) ((q1 0) q0) ((q1 1) q3)             ; transition states
      ((q2 0) q3) ((q2 1) q1) ((q3 0) q3) ((q3 1) q3))
   (q0)))                                                         ;success state

;tests for 6.3 dfa
(display(execute xor-dfa '(0 0 1)))(newline)
(display(execute xor-dfa '(0 1 0)))(newline)
(display(execute xor-dfa '(0 1 1)))(newline)

;tests for 6.4 dfa
(display(execute figure6-4_dfa '( 0 1 0)))(newline)
(display(execute figure6-4_dfa '( 0 1 0 0 1 0)))(newline)
(display(execute figure6-4_dfa '( 1 0 1)))(newline)

;Tests for 6.3 dfa (execute in racket terminal, line by line)
  ;Test Case: 1 | Expected Output: 1 | Accepted
    ;(execute xor-dfa '(0 0 1))
  ;Test Case: 2 | Expected Output: 1 | Accepted
    ;(execute xor-dfa '(0 1 0)
  ;Test Case: 3 | Expected Output: 0 | Rejected
    ;(execute xor-dfa '(0 1 1)

;tests for 6.4 dfa (execute in racket terminal, line by line)
  ;Test Case: 1 | Expected Output: 1 | Accepted
    ;(execute figure6-4_dfa '( 0 1 0)
  ;Test Case: 2 | Expected Output: 1 | Accepted
    ;(execute figure6-4_dfa '( 0 1 0 0 1 0)
  ;Test Case: 3 | Expected Output: 0 | Rejected
    ;(execute figure6-4_dfa '( 1 0 1)